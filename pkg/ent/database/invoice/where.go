// Code generated by ent, DO NOT EDIT.

package invoice

import (
	"cpg/pkg/ent/database/predicate"
	"fmt"
	"math/big"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldID, id))
}

// MinAmount applies equality check predicate on the "min_amount" field. It's identical to MinAmountEQ.
func MinAmount(v *big.Int) predicate.Invoice {
	vc, err := ValueScanner.MinAmount.Value(v)
	return predicate.InvoiceOrErr(sql.FieldEQ(FieldMinAmount, vc), err)
}

// Recipient applies equality check predicate on the "recipient" field. It's identical to RecipientEQ.
func Recipient(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldRecipient, v))
}

// Beneficiary applies equality check predicate on the "beneficiary" field. It's identical to BeneficiaryEQ.
func Beneficiary(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBeneficiary, v))
}

// Asset applies equality check predicate on the "asset" field. It's identical to AssetEQ.
func Asset(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAsset, v))
}

// Metadata applies equality check predicate on the "metadata" field. It's identical to MetadataEQ.
func Metadata(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldMetadata, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCreateAt, v))
}

// Deadline applies equality check predicate on the "deadline" field. It's identical to DeadlineEQ.
func Deadline(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldDeadline, v))
}

// FillAt applies equality check predicate on the "fill_at" field. It's identical to FillAtEQ.
func FillAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldFillAt, v))
}

// LastCheckoutAt applies equality check predicate on the "last_checkout_at" field. It's identical to LastCheckoutAtEQ.
func LastCheckoutAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldLastCheckoutAt, v))
}

// CheckoutRequestAt applies equality check predicate on the "checkout_request_at" field. It's identical to CheckoutRequestAtEQ.
func CheckoutRequestAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCheckoutRequestAt, v))
}

// CancelAt applies equality check predicate on the "cancel_at" field. It's identical to CancelAtEQ.
func CancelAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCancelAt, v))
}

// WalletAddress applies equality check predicate on the "wallet_address" field. It's identical to WalletAddressEQ.
func WalletAddress(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldWalletAddress, v))
}

// EncryptedSalt applies equality check predicate on the "encrypted_salt" field. It's identical to EncryptedSaltEQ.
func EncryptedSalt(v []byte) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldEncryptedSalt, v))
}

// MinAmountEQ applies the EQ predicate on the "min_amount" field.
func MinAmountEQ(v *big.Int) predicate.Invoice {
	vc, err := ValueScanner.MinAmount.Value(v)
	return predicate.InvoiceOrErr(sql.FieldEQ(FieldMinAmount, vc), err)
}

// MinAmountNEQ applies the NEQ predicate on the "min_amount" field.
func MinAmountNEQ(v *big.Int) predicate.Invoice {
	vc, err := ValueScanner.MinAmount.Value(v)
	return predicate.InvoiceOrErr(sql.FieldNEQ(FieldMinAmount, vc), err)
}

// MinAmountIn applies the In predicate on the "min_amount" field.
func MinAmountIn(vs ...*big.Int) predicate.Invoice {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.MinAmount.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.InvoiceOrErr(sql.FieldIn(FieldMinAmount, v...), err)
}

// MinAmountNotIn applies the NotIn predicate on the "min_amount" field.
func MinAmountNotIn(vs ...*big.Int) predicate.Invoice {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.MinAmount.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.InvoiceOrErr(sql.FieldNotIn(FieldMinAmount, v...), err)
}

// MinAmountGT applies the GT predicate on the "min_amount" field.
func MinAmountGT(v *big.Int) predicate.Invoice {
	vc, err := ValueScanner.MinAmount.Value(v)
	return predicate.InvoiceOrErr(sql.FieldGT(FieldMinAmount, vc), err)
}

// MinAmountGTE applies the GTE predicate on the "min_amount" field.
func MinAmountGTE(v *big.Int) predicate.Invoice {
	vc, err := ValueScanner.MinAmount.Value(v)
	return predicate.InvoiceOrErr(sql.FieldGTE(FieldMinAmount, vc), err)
}

// MinAmountLT applies the LT predicate on the "min_amount" field.
func MinAmountLT(v *big.Int) predicate.Invoice {
	vc, err := ValueScanner.MinAmount.Value(v)
	return predicate.InvoiceOrErr(sql.FieldLT(FieldMinAmount, vc), err)
}

// MinAmountLTE applies the LTE predicate on the "min_amount" field.
func MinAmountLTE(v *big.Int) predicate.Invoice {
	vc, err := ValueScanner.MinAmount.Value(v)
	return predicate.InvoiceOrErr(sql.FieldLTE(FieldMinAmount, vc), err)
}

// MinAmountContains applies the Contains predicate on the "min_amount" field.
func MinAmountContains(v *big.Int) predicate.Invoice {
	vc, err := ValueScanner.MinAmount.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("min_amount value is not a string: %T", vc)
	}
	return predicate.InvoiceOrErr(sql.FieldContains(FieldMinAmount, vcs), err)
}

// MinAmountHasPrefix applies the HasPrefix predicate on the "min_amount" field.
func MinAmountHasPrefix(v *big.Int) predicate.Invoice {
	vc, err := ValueScanner.MinAmount.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("min_amount value is not a string: %T", vc)
	}
	return predicate.InvoiceOrErr(sql.FieldHasPrefix(FieldMinAmount, vcs), err)
}

// MinAmountHasSuffix applies the HasSuffix predicate on the "min_amount" field.
func MinAmountHasSuffix(v *big.Int) predicate.Invoice {
	vc, err := ValueScanner.MinAmount.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("min_amount value is not a string: %T", vc)
	}
	return predicate.InvoiceOrErr(sql.FieldHasSuffix(FieldMinAmount, vcs), err)
}

// MinAmountEqualFold applies the EqualFold predicate on the "min_amount" field.
func MinAmountEqualFold(v *big.Int) predicate.Invoice {
	vc, err := ValueScanner.MinAmount.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("min_amount value is not a string: %T", vc)
	}
	return predicate.InvoiceOrErr(sql.FieldEqualFold(FieldMinAmount, vcs), err)
}

// MinAmountContainsFold applies the ContainsFold predicate on the "min_amount" field.
func MinAmountContainsFold(v *big.Int) predicate.Invoice {
	vc, err := ValueScanner.MinAmount.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("min_amount value is not a string: %T", vc)
	}
	return predicate.InvoiceOrErr(sql.FieldContainsFold(FieldMinAmount, vcs), err)
}

// RecipientEQ applies the EQ predicate on the "recipient" field.
func RecipientEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldRecipient, v))
}

// RecipientNEQ applies the NEQ predicate on the "recipient" field.
func RecipientNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldRecipient, v))
}

// RecipientIn applies the In predicate on the "recipient" field.
func RecipientIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldRecipient, vs...))
}

// RecipientNotIn applies the NotIn predicate on the "recipient" field.
func RecipientNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldRecipient, vs...))
}

// RecipientGT applies the GT predicate on the "recipient" field.
func RecipientGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldRecipient, v))
}

// RecipientGTE applies the GTE predicate on the "recipient" field.
func RecipientGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldRecipient, v))
}

// RecipientLT applies the LT predicate on the "recipient" field.
func RecipientLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldRecipient, v))
}

// RecipientLTE applies the LTE predicate on the "recipient" field.
func RecipientLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldRecipient, v))
}

// RecipientContains applies the Contains predicate on the "recipient" field.
func RecipientContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldRecipient, v))
}

// RecipientHasPrefix applies the HasPrefix predicate on the "recipient" field.
func RecipientHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldRecipient, v))
}

// RecipientHasSuffix applies the HasSuffix predicate on the "recipient" field.
func RecipientHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldRecipient, v))
}

// RecipientEqualFold applies the EqualFold predicate on the "recipient" field.
func RecipientEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldRecipient, v))
}

// RecipientContainsFold applies the ContainsFold predicate on the "recipient" field.
func RecipientContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldRecipient, v))
}

// BeneficiaryEQ applies the EQ predicate on the "beneficiary" field.
func BeneficiaryEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBeneficiary, v))
}

// BeneficiaryNEQ applies the NEQ predicate on the "beneficiary" field.
func BeneficiaryNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldBeneficiary, v))
}

// BeneficiaryIn applies the In predicate on the "beneficiary" field.
func BeneficiaryIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldBeneficiary, vs...))
}

// BeneficiaryNotIn applies the NotIn predicate on the "beneficiary" field.
func BeneficiaryNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldBeneficiary, vs...))
}

// BeneficiaryGT applies the GT predicate on the "beneficiary" field.
func BeneficiaryGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldBeneficiary, v))
}

// BeneficiaryGTE applies the GTE predicate on the "beneficiary" field.
func BeneficiaryGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldBeneficiary, v))
}

// BeneficiaryLT applies the LT predicate on the "beneficiary" field.
func BeneficiaryLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldBeneficiary, v))
}

// BeneficiaryLTE applies the LTE predicate on the "beneficiary" field.
func BeneficiaryLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldBeneficiary, v))
}

// BeneficiaryContains applies the Contains predicate on the "beneficiary" field.
func BeneficiaryContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldBeneficiary, v))
}

// BeneficiaryHasPrefix applies the HasPrefix predicate on the "beneficiary" field.
func BeneficiaryHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldBeneficiary, v))
}

// BeneficiaryHasSuffix applies the HasSuffix predicate on the "beneficiary" field.
func BeneficiaryHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldBeneficiary, v))
}

// BeneficiaryEqualFold applies the EqualFold predicate on the "beneficiary" field.
func BeneficiaryEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldBeneficiary, v))
}

// BeneficiaryContainsFold applies the ContainsFold predicate on the "beneficiary" field.
func BeneficiaryContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldBeneficiary, v))
}

// AssetEQ applies the EQ predicate on the "asset" field.
func AssetEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAsset, v))
}

// AssetNEQ applies the NEQ predicate on the "asset" field.
func AssetNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldAsset, v))
}

// AssetIn applies the In predicate on the "asset" field.
func AssetIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldAsset, vs...))
}

// AssetNotIn applies the NotIn predicate on the "asset" field.
func AssetNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldAsset, vs...))
}

// AssetGT applies the GT predicate on the "asset" field.
func AssetGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldAsset, v))
}

// AssetGTE applies the GTE predicate on the "asset" field.
func AssetGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldAsset, v))
}

// AssetLT applies the LT predicate on the "asset" field.
func AssetLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldAsset, v))
}

// AssetLTE applies the LTE predicate on the "asset" field.
func AssetLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldAsset, v))
}

// AssetContains applies the Contains predicate on the "asset" field.
func AssetContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldAsset, v))
}

// AssetHasPrefix applies the HasPrefix predicate on the "asset" field.
func AssetHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldAsset, v))
}

// AssetHasSuffix applies the HasSuffix predicate on the "asset" field.
func AssetHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldAsset, v))
}

// AssetEqualFold applies the EqualFold predicate on the "asset" field.
func AssetEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldAsset, v))
}

// AssetContainsFold applies the ContainsFold predicate on the "asset" field.
func AssetContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldAsset, v))
}

// MetadataEQ applies the EQ predicate on the "metadata" field.
func MetadataEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldMetadata, v))
}

// MetadataNEQ applies the NEQ predicate on the "metadata" field.
func MetadataNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldMetadata, v))
}

// MetadataIn applies the In predicate on the "metadata" field.
func MetadataIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldMetadata, vs...))
}

// MetadataNotIn applies the NotIn predicate on the "metadata" field.
func MetadataNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldMetadata, vs...))
}

// MetadataGT applies the GT predicate on the "metadata" field.
func MetadataGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldMetadata, v))
}

// MetadataGTE applies the GTE predicate on the "metadata" field.
func MetadataGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldMetadata, v))
}

// MetadataLT applies the LT predicate on the "metadata" field.
func MetadataLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldMetadata, v))
}

// MetadataLTE applies the LTE predicate on the "metadata" field.
func MetadataLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldMetadata, v))
}

// MetadataContains applies the Contains predicate on the "metadata" field.
func MetadataContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldMetadata, v))
}

// MetadataHasPrefix applies the HasPrefix predicate on the "metadata" field.
func MetadataHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldMetadata, v))
}

// MetadataHasSuffix applies the HasSuffix predicate on the "metadata" field.
func MetadataHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldMetadata, v))
}

// MetadataEqualFold applies the EqualFold predicate on the "metadata" field.
func MetadataEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldMetadata, v))
}

// MetadataContainsFold applies the ContainsFold predicate on the "metadata" field.
func MetadataContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldMetadata, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCreateAt, v))
}

// DeadlineEQ applies the EQ predicate on the "deadline" field.
func DeadlineEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldDeadline, v))
}

// DeadlineNEQ applies the NEQ predicate on the "deadline" field.
func DeadlineNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldDeadline, v))
}

// DeadlineIn applies the In predicate on the "deadline" field.
func DeadlineIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldDeadline, vs...))
}

// DeadlineNotIn applies the NotIn predicate on the "deadline" field.
func DeadlineNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldDeadline, vs...))
}

// DeadlineGT applies the GT predicate on the "deadline" field.
func DeadlineGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldDeadline, v))
}

// DeadlineGTE applies the GTE predicate on the "deadline" field.
func DeadlineGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldDeadline, v))
}

// DeadlineLT applies the LT predicate on the "deadline" field.
func DeadlineLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldDeadline, v))
}

// DeadlineLTE applies the LTE predicate on the "deadline" field.
func DeadlineLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldDeadline, v))
}

// FillAtEQ applies the EQ predicate on the "fill_at" field.
func FillAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldFillAt, v))
}

// FillAtNEQ applies the NEQ predicate on the "fill_at" field.
func FillAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldFillAt, v))
}

// FillAtIn applies the In predicate on the "fill_at" field.
func FillAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldFillAt, vs...))
}

// FillAtNotIn applies the NotIn predicate on the "fill_at" field.
func FillAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldFillAt, vs...))
}

// FillAtGT applies the GT predicate on the "fill_at" field.
func FillAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldFillAt, v))
}

// FillAtGTE applies the GTE predicate on the "fill_at" field.
func FillAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldFillAt, v))
}

// FillAtLT applies the LT predicate on the "fill_at" field.
func FillAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldFillAt, v))
}

// FillAtLTE applies the LTE predicate on the "fill_at" field.
func FillAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldFillAt, v))
}

// FillAtIsNil applies the IsNil predicate on the "fill_at" field.
func FillAtIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldFillAt))
}

// FillAtNotNil applies the NotNil predicate on the "fill_at" field.
func FillAtNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldFillAt))
}

// LastCheckoutAtEQ applies the EQ predicate on the "last_checkout_at" field.
func LastCheckoutAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldLastCheckoutAt, v))
}

// LastCheckoutAtNEQ applies the NEQ predicate on the "last_checkout_at" field.
func LastCheckoutAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldLastCheckoutAt, v))
}

// LastCheckoutAtIn applies the In predicate on the "last_checkout_at" field.
func LastCheckoutAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldLastCheckoutAt, vs...))
}

// LastCheckoutAtNotIn applies the NotIn predicate on the "last_checkout_at" field.
func LastCheckoutAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldLastCheckoutAt, vs...))
}

// LastCheckoutAtGT applies the GT predicate on the "last_checkout_at" field.
func LastCheckoutAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldLastCheckoutAt, v))
}

// LastCheckoutAtGTE applies the GTE predicate on the "last_checkout_at" field.
func LastCheckoutAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldLastCheckoutAt, v))
}

// LastCheckoutAtLT applies the LT predicate on the "last_checkout_at" field.
func LastCheckoutAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldLastCheckoutAt, v))
}

// LastCheckoutAtLTE applies the LTE predicate on the "last_checkout_at" field.
func LastCheckoutAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldLastCheckoutAt, v))
}

// LastCheckoutAtIsNil applies the IsNil predicate on the "last_checkout_at" field.
func LastCheckoutAtIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldLastCheckoutAt))
}

// LastCheckoutAtNotNil applies the NotNil predicate on the "last_checkout_at" field.
func LastCheckoutAtNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldLastCheckoutAt))
}

// CheckoutRequestAtEQ applies the EQ predicate on the "checkout_request_at" field.
func CheckoutRequestAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCheckoutRequestAt, v))
}

// CheckoutRequestAtNEQ applies the NEQ predicate on the "checkout_request_at" field.
func CheckoutRequestAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCheckoutRequestAt, v))
}

// CheckoutRequestAtIn applies the In predicate on the "checkout_request_at" field.
func CheckoutRequestAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCheckoutRequestAt, vs...))
}

// CheckoutRequestAtNotIn applies the NotIn predicate on the "checkout_request_at" field.
func CheckoutRequestAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCheckoutRequestAt, vs...))
}

// CheckoutRequestAtGT applies the GT predicate on the "checkout_request_at" field.
func CheckoutRequestAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCheckoutRequestAt, v))
}

// CheckoutRequestAtGTE applies the GTE predicate on the "checkout_request_at" field.
func CheckoutRequestAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCheckoutRequestAt, v))
}

// CheckoutRequestAtLT applies the LT predicate on the "checkout_request_at" field.
func CheckoutRequestAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCheckoutRequestAt, v))
}

// CheckoutRequestAtLTE applies the LTE predicate on the "checkout_request_at" field.
func CheckoutRequestAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCheckoutRequestAt, v))
}

// CheckoutRequestAtIsNil applies the IsNil predicate on the "checkout_request_at" field.
func CheckoutRequestAtIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldCheckoutRequestAt))
}

// CheckoutRequestAtNotNil applies the NotNil predicate on the "checkout_request_at" field.
func CheckoutRequestAtNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldCheckoutRequestAt))
}

// CancelAtEQ applies the EQ predicate on the "cancel_at" field.
func CancelAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCancelAt, v))
}

// CancelAtNEQ applies the NEQ predicate on the "cancel_at" field.
func CancelAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCancelAt, v))
}

// CancelAtIn applies the In predicate on the "cancel_at" field.
func CancelAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCancelAt, vs...))
}

// CancelAtNotIn applies the NotIn predicate on the "cancel_at" field.
func CancelAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCancelAt, vs...))
}

// CancelAtGT applies the GT predicate on the "cancel_at" field.
func CancelAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCancelAt, v))
}

// CancelAtGTE applies the GTE predicate on the "cancel_at" field.
func CancelAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCancelAt, v))
}

// CancelAtLT applies the LT predicate on the "cancel_at" field.
func CancelAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCancelAt, v))
}

// CancelAtLTE applies the LTE predicate on the "cancel_at" field.
func CancelAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCancelAt, v))
}

// CancelAtIsNil applies the IsNil predicate on the "cancel_at" field.
func CancelAtIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldCancelAt))
}

// CancelAtNotNil applies the NotNil predicate on the "cancel_at" field.
func CancelAtNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldCancelAt))
}

// WalletAddressEQ applies the EQ predicate on the "wallet_address" field.
func WalletAddressEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldWalletAddress, v))
}

// WalletAddressNEQ applies the NEQ predicate on the "wallet_address" field.
func WalletAddressNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldWalletAddress, v))
}

// WalletAddressIn applies the In predicate on the "wallet_address" field.
func WalletAddressIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldWalletAddress, vs...))
}

// WalletAddressNotIn applies the NotIn predicate on the "wallet_address" field.
func WalletAddressNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldWalletAddress, vs...))
}

// WalletAddressGT applies the GT predicate on the "wallet_address" field.
func WalletAddressGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldWalletAddress, v))
}

// WalletAddressGTE applies the GTE predicate on the "wallet_address" field.
func WalletAddressGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldWalletAddress, v))
}

// WalletAddressLT applies the LT predicate on the "wallet_address" field.
func WalletAddressLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldWalletAddress, v))
}

// WalletAddressLTE applies the LTE predicate on the "wallet_address" field.
func WalletAddressLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldWalletAddress, v))
}

// WalletAddressContains applies the Contains predicate on the "wallet_address" field.
func WalletAddressContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldWalletAddress, v))
}

// WalletAddressHasPrefix applies the HasPrefix predicate on the "wallet_address" field.
func WalletAddressHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldWalletAddress, v))
}

// WalletAddressHasSuffix applies the HasSuffix predicate on the "wallet_address" field.
func WalletAddressHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldWalletAddress, v))
}

// WalletAddressEqualFold applies the EqualFold predicate on the "wallet_address" field.
func WalletAddressEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldWalletAddress, v))
}

// WalletAddressContainsFold applies the ContainsFold predicate on the "wallet_address" field.
func WalletAddressContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldWalletAddress, v))
}

// EncryptedSaltEQ applies the EQ predicate on the "encrypted_salt" field.
func EncryptedSaltEQ(v []byte) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldEncryptedSalt, v))
}

// EncryptedSaltNEQ applies the NEQ predicate on the "encrypted_salt" field.
func EncryptedSaltNEQ(v []byte) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldEncryptedSalt, v))
}

// EncryptedSaltIn applies the In predicate on the "encrypted_salt" field.
func EncryptedSaltIn(vs ...[]byte) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldEncryptedSalt, vs...))
}

// EncryptedSaltNotIn applies the NotIn predicate on the "encrypted_salt" field.
func EncryptedSaltNotIn(vs ...[]byte) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldEncryptedSalt, vs...))
}

// EncryptedSaltGT applies the GT predicate on the "encrypted_salt" field.
func EncryptedSaltGT(v []byte) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldEncryptedSalt, v))
}

// EncryptedSaltGTE applies the GTE predicate on the "encrypted_salt" field.
func EncryptedSaltGTE(v []byte) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldEncryptedSalt, v))
}

// EncryptedSaltLT applies the LT predicate on the "encrypted_salt" field.
func EncryptedSaltLT(v []byte) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldEncryptedSalt, v))
}

// EncryptedSaltLTE applies the LTE predicate on the "encrypted_salt" field.
func EncryptedSaltLTE(v []byte) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldEncryptedSalt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.NotPredicates(p))
}
