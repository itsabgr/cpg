// Code generated by ent, DO NOT EDIT.

package invoice

import (
	"math/big"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/schema/field"
)

const (
	// Label holds the string label denoting the invoice type in the database.
	Label = "invoice"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMinAmount holds the string denoting the min_amount field in the database.
	FieldMinAmount = "min_amount"
	// FieldRecipient holds the string denoting the recipient field in the database.
	FieldRecipient = "recipient"
	// FieldBeneficiary holds the string denoting the beneficiary field in the database.
	FieldBeneficiary = "beneficiary"
	// FieldAsset holds the string denoting the asset field in the database.
	FieldAsset = "asset"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldDeadline holds the string denoting the deadline field in the database.
	FieldDeadline = "deadline"
	// FieldFillAt holds the string denoting the fill_at field in the database.
	FieldFillAt = "fill_at"
	// FieldLastCheckoutAt holds the string denoting the last_checkout_at field in the database.
	FieldLastCheckoutAt = "last_checkout_at"
	// FieldCheckoutRequestAt holds the string denoting the checkout_request_at field in the database.
	FieldCheckoutRequestAt = "checkout_request_at"
	// FieldAutoCheckout holds the string denoting the auto_checkout field in the database.
	FieldAutoCheckout = "auto_checkout"
	// FieldCancelAt holds the string denoting the cancel_at field in the database.
	FieldCancelAt = "cancel_at"
	// FieldWalletAddress holds the string denoting the wallet_address field in the database.
	FieldWalletAddress = "wallet_address"
	// FieldEncryptedSalt holds the string denoting the encrypted_salt field in the database.
	FieldEncryptedSalt = "encrypted_salt"
	// Table holds the table name of the invoice in the database.
	Table = "invoices"
)

// Columns holds all SQL columns for invoice fields.
var Columns = []string{
	FieldID,
	FieldMinAmount,
	FieldRecipient,
	FieldBeneficiary,
	FieldAsset,
	FieldMetadata,
	FieldCreateAt,
	FieldDeadline,
	FieldFillAt,
	FieldLastCheckoutAt,
	FieldCheckoutRequestAt,
	FieldAutoCheckout,
	FieldCancelAt,
	FieldWalletAddress,
	FieldEncryptedSalt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// MinAmountValidator is a validator for the "min_amount" field. It is called by the builders before save.
	MinAmountValidator func(string) error
	// RecipientValidator is a validator for the "recipient" field. It is called by the builders before save.
	RecipientValidator func(string) error
	// BeneficiaryValidator is a validator for the "beneficiary" field. It is called by the builders before save.
	BeneficiaryValidator func(string) error
	// AssetValidator is a validator for the "asset" field. It is called by the builders before save.
	AssetValidator func(string) error
	// MetadataValidator is a validator for the "metadata" field. It is called by the builders before save.
	MetadataValidator func(string) error
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() time.Time
	// DefaultAutoCheckout holds the default value on creation for the "auto_checkout" field.
	DefaultAutoCheckout bool
	// WalletAddressValidator is a validator for the "wallet_address" field. It is called by the builders before save.
	WalletAddressValidator func(string) error
	// EncryptedSaltValidator is a validator for the "encrypted_salt" field. It is called by the builders before save.
	EncryptedSaltValidator func([]byte) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
	// ValueScanner of all Invoice fields.
	ValueScanner struct {
		MinAmount field.TypeValueScanner[*big.Int]
	}
)

// OrderOption defines the ordering options for the Invoice queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMinAmount orders the results by the min_amount field.
func ByMinAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinAmount, opts...).ToFunc()
}

// ByRecipient orders the results by the recipient field.
func ByRecipient(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecipient, opts...).ToFunc()
}

// ByBeneficiary orders the results by the beneficiary field.
func ByBeneficiary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBeneficiary, opts...).ToFunc()
}

// ByAsset orders the results by the asset field.
func ByAsset(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAsset, opts...).ToFunc()
}

// ByMetadata orders the results by the metadata field.
func ByMetadata(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetadata, opts...).ToFunc()
}

// ByCreateAt orders the results by the create_at field.
func ByCreateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateAt, opts...).ToFunc()
}

// ByDeadline orders the results by the deadline field.
func ByDeadline(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeadline, opts...).ToFunc()
}

// ByFillAt orders the results by the fill_at field.
func ByFillAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFillAt, opts...).ToFunc()
}

// ByLastCheckoutAt orders the results by the last_checkout_at field.
func ByLastCheckoutAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastCheckoutAt, opts...).ToFunc()
}

// ByCheckoutRequestAt orders the results by the checkout_request_at field.
func ByCheckoutRequestAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCheckoutRequestAt, opts...).ToFunc()
}

// ByAutoCheckout orders the results by the auto_checkout field.
func ByAutoCheckout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoCheckout, opts...).ToFunc()
}

// ByCancelAt orders the results by the cancel_at field.
func ByCancelAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancelAt, opts...).ToFunc()
}

// ByWalletAddress orders the results by the wallet_address field.
func ByWalletAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWalletAddress, opts...).ToFunc()
}
