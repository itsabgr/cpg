// Code generated by ent, DO NOT EDIT.

package database

import (
	"context"
	"cpg/pkg/ent/database/invoice"
	"cpg/pkg/ent/database/predicate"
	"errors"
	"fmt"
	"math/big"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeInvoice = "Invoice"
)

// InvoiceMutation represents an operation that mutates the Invoice nodes in the graph.
type InvoiceMutation struct {
	config
	op             Op
	typ            string
	id             *string
	min_amount     **big.Int
	recipient      *string
	beneficiary    *string
	asset          *string
	metadata       *string
	create_at      *time.Time
	deadline       *time.Time
	fill_at        *time.Time
	cancel_at      *time.Time
	wallet_address *string
	encrypted_salt *[]byte
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Invoice, error)
	predicates     []predicate.Invoice
}

var _ ent.Mutation = (*InvoiceMutation)(nil)

// invoiceOption allows management of the mutation configuration using functional options.
type invoiceOption func(*InvoiceMutation)

// newInvoiceMutation creates new mutation for the Invoice entity.
func newInvoiceMutation(c config, op Op, opts ...invoiceOption) *InvoiceMutation {
	m := &InvoiceMutation{
		config:        c,
		op:            op,
		typ:           TypeInvoice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInvoiceID sets the ID field of the mutation.
func withInvoiceID(id string) invoiceOption {
	return func(m *InvoiceMutation) {
		var (
			err   error
			once  sync.Once
			value *Invoice
		)
		m.oldValue = func(ctx context.Context) (*Invoice, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Invoice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInvoice sets the old Invoice of the mutation.
func withInvoice(node *Invoice) invoiceOption {
	return func(m *InvoiceMutation) {
		m.oldValue = func(context.Context) (*Invoice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InvoiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InvoiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("database: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Invoice entities.
func (m *InvoiceMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InvoiceMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InvoiceMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Invoice.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMinAmount sets the "min_amount" field.
func (m *InvoiceMutation) SetMinAmount(b *big.Int) {
	m.min_amount = &b
}

// MinAmount returns the value of the "min_amount" field in the mutation.
func (m *InvoiceMutation) MinAmount() (r *big.Int, exists bool) {
	v := m.min_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldMinAmount returns the old "min_amount" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldMinAmount(ctx context.Context) (v *big.Int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinAmount: %w", err)
	}
	return oldValue.MinAmount, nil
}

// ResetMinAmount resets all changes to the "min_amount" field.
func (m *InvoiceMutation) ResetMinAmount() {
	m.min_amount = nil
}

// SetRecipient sets the "recipient" field.
func (m *InvoiceMutation) SetRecipient(s string) {
	m.recipient = &s
}

// Recipient returns the value of the "recipient" field in the mutation.
func (m *InvoiceMutation) Recipient() (r string, exists bool) {
	v := m.recipient
	if v == nil {
		return
	}
	return *v, true
}

// OldRecipient returns the old "recipient" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldRecipient(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecipient is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecipient requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecipient: %w", err)
	}
	return oldValue.Recipient, nil
}

// ResetRecipient resets all changes to the "recipient" field.
func (m *InvoiceMutation) ResetRecipient() {
	m.recipient = nil
}

// SetBeneficiary sets the "beneficiary" field.
func (m *InvoiceMutation) SetBeneficiary(s string) {
	m.beneficiary = &s
}

// Beneficiary returns the value of the "beneficiary" field in the mutation.
func (m *InvoiceMutation) Beneficiary() (r string, exists bool) {
	v := m.beneficiary
	if v == nil {
		return
	}
	return *v, true
}

// OldBeneficiary returns the old "beneficiary" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldBeneficiary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBeneficiary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBeneficiary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBeneficiary: %w", err)
	}
	return oldValue.Beneficiary, nil
}

// ResetBeneficiary resets all changes to the "beneficiary" field.
func (m *InvoiceMutation) ResetBeneficiary() {
	m.beneficiary = nil
}

// SetAsset sets the "asset" field.
func (m *InvoiceMutation) SetAsset(s string) {
	m.asset = &s
}

// Asset returns the value of the "asset" field in the mutation.
func (m *InvoiceMutation) Asset() (r string, exists bool) {
	v := m.asset
	if v == nil {
		return
	}
	return *v, true
}

// OldAsset returns the old "asset" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldAsset(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAsset is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAsset requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAsset: %w", err)
	}
	return oldValue.Asset, nil
}

// ResetAsset resets all changes to the "asset" field.
func (m *InvoiceMutation) ResetAsset() {
	m.asset = nil
}

// SetMetadata sets the "metadata" field.
func (m *InvoiceMutation) SetMetadata(s string) {
	m.metadata = &s
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *InvoiceMutation) Metadata() (r string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldMetadata(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *InvoiceMutation) ResetMetadata() {
	m.metadata = nil
}

// SetCreateAt sets the "create_at" field.
func (m *InvoiceMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *InvoiceMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *InvoiceMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetDeadline sets the "deadline" field.
func (m *InvoiceMutation) SetDeadline(t time.Time) {
	m.deadline = &t
}

// Deadline returns the value of the "deadline" field in the mutation.
func (m *InvoiceMutation) Deadline() (r time.Time, exists bool) {
	v := m.deadline
	if v == nil {
		return
	}
	return *v, true
}

// OldDeadline returns the old "deadline" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldDeadline(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeadline is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeadline requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeadline: %w", err)
	}
	return oldValue.Deadline, nil
}

// ResetDeadline resets all changes to the "deadline" field.
func (m *InvoiceMutation) ResetDeadline() {
	m.deadline = nil
}

// SetFillAt sets the "fill_at" field.
func (m *InvoiceMutation) SetFillAt(t time.Time) {
	m.fill_at = &t
}

// FillAt returns the value of the "fill_at" field in the mutation.
func (m *InvoiceMutation) FillAt() (r time.Time, exists bool) {
	v := m.fill_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFillAt returns the old "fill_at" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldFillAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFillAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFillAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFillAt: %w", err)
	}
	return oldValue.FillAt, nil
}

// ClearFillAt clears the value of the "fill_at" field.
func (m *InvoiceMutation) ClearFillAt() {
	m.fill_at = nil
	m.clearedFields[invoice.FieldFillAt] = struct{}{}
}

// FillAtCleared returns if the "fill_at" field was cleared in this mutation.
func (m *InvoiceMutation) FillAtCleared() bool {
	_, ok := m.clearedFields[invoice.FieldFillAt]
	return ok
}

// ResetFillAt resets all changes to the "fill_at" field.
func (m *InvoiceMutation) ResetFillAt() {
	m.fill_at = nil
	delete(m.clearedFields, invoice.FieldFillAt)
}

// SetCancelAt sets the "cancel_at" field.
func (m *InvoiceMutation) SetCancelAt(t time.Time) {
	m.cancel_at = &t
}

// CancelAt returns the value of the "cancel_at" field in the mutation.
func (m *InvoiceMutation) CancelAt() (r time.Time, exists bool) {
	v := m.cancel_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCancelAt returns the old "cancel_at" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldCancelAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCancelAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCancelAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancelAt: %w", err)
	}
	return oldValue.CancelAt, nil
}

// ClearCancelAt clears the value of the "cancel_at" field.
func (m *InvoiceMutation) ClearCancelAt() {
	m.cancel_at = nil
	m.clearedFields[invoice.FieldCancelAt] = struct{}{}
}

// CancelAtCleared returns if the "cancel_at" field was cleared in this mutation.
func (m *InvoiceMutation) CancelAtCleared() bool {
	_, ok := m.clearedFields[invoice.FieldCancelAt]
	return ok
}

// ResetCancelAt resets all changes to the "cancel_at" field.
func (m *InvoiceMutation) ResetCancelAt() {
	m.cancel_at = nil
	delete(m.clearedFields, invoice.FieldCancelAt)
}

// SetWalletAddress sets the "wallet_address" field.
func (m *InvoiceMutation) SetWalletAddress(s string) {
	m.wallet_address = &s
}

// WalletAddress returns the value of the "wallet_address" field in the mutation.
func (m *InvoiceMutation) WalletAddress() (r string, exists bool) {
	v := m.wallet_address
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletAddress returns the old "wallet_address" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldWalletAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletAddress: %w", err)
	}
	return oldValue.WalletAddress, nil
}

// ResetWalletAddress resets all changes to the "wallet_address" field.
func (m *InvoiceMutation) ResetWalletAddress() {
	m.wallet_address = nil
}

// SetEncryptedSalt sets the "encrypted_salt" field.
func (m *InvoiceMutation) SetEncryptedSalt(b []byte) {
	m.encrypted_salt = &b
}

// EncryptedSalt returns the value of the "encrypted_salt" field in the mutation.
func (m *InvoiceMutation) EncryptedSalt() (r []byte, exists bool) {
	v := m.encrypted_salt
	if v == nil {
		return
	}
	return *v, true
}

// OldEncryptedSalt returns the old "encrypted_salt" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldEncryptedSalt(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEncryptedSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEncryptedSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEncryptedSalt: %w", err)
	}
	return oldValue.EncryptedSalt, nil
}

// ResetEncryptedSalt resets all changes to the "encrypted_salt" field.
func (m *InvoiceMutation) ResetEncryptedSalt() {
	m.encrypted_salt = nil
}

// Where appends a list predicates to the InvoiceMutation builder.
func (m *InvoiceMutation) Where(ps ...predicate.Invoice) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InvoiceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InvoiceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Invoice, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InvoiceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InvoiceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Invoice).
func (m *InvoiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InvoiceMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.min_amount != nil {
		fields = append(fields, invoice.FieldMinAmount)
	}
	if m.recipient != nil {
		fields = append(fields, invoice.FieldRecipient)
	}
	if m.beneficiary != nil {
		fields = append(fields, invoice.FieldBeneficiary)
	}
	if m.asset != nil {
		fields = append(fields, invoice.FieldAsset)
	}
	if m.metadata != nil {
		fields = append(fields, invoice.FieldMetadata)
	}
	if m.create_at != nil {
		fields = append(fields, invoice.FieldCreateAt)
	}
	if m.deadline != nil {
		fields = append(fields, invoice.FieldDeadline)
	}
	if m.fill_at != nil {
		fields = append(fields, invoice.FieldFillAt)
	}
	if m.cancel_at != nil {
		fields = append(fields, invoice.FieldCancelAt)
	}
	if m.wallet_address != nil {
		fields = append(fields, invoice.FieldWalletAddress)
	}
	if m.encrypted_salt != nil {
		fields = append(fields, invoice.FieldEncryptedSalt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InvoiceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case invoice.FieldMinAmount:
		return m.MinAmount()
	case invoice.FieldRecipient:
		return m.Recipient()
	case invoice.FieldBeneficiary:
		return m.Beneficiary()
	case invoice.FieldAsset:
		return m.Asset()
	case invoice.FieldMetadata:
		return m.Metadata()
	case invoice.FieldCreateAt:
		return m.CreateAt()
	case invoice.FieldDeadline:
		return m.Deadline()
	case invoice.FieldFillAt:
		return m.FillAt()
	case invoice.FieldCancelAt:
		return m.CancelAt()
	case invoice.FieldWalletAddress:
		return m.WalletAddress()
	case invoice.FieldEncryptedSalt:
		return m.EncryptedSalt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InvoiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case invoice.FieldMinAmount:
		return m.OldMinAmount(ctx)
	case invoice.FieldRecipient:
		return m.OldRecipient(ctx)
	case invoice.FieldBeneficiary:
		return m.OldBeneficiary(ctx)
	case invoice.FieldAsset:
		return m.OldAsset(ctx)
	case invoice.FieldMetadata:
		return m.OldMetadata(ctx)
	case invoice.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case invoice.FieldDeadline:
		return m.OldDeadline(ctx)
	case invoice.FieldFillAt:
		return m.OldFillAt(ctx)
	case invoice.FieldCancelAt:
		return m.OldCancelAt(ctx)
	case invoice.FieldWalletAddress:
		return m.OldWalletAddress(ctx)
	case invoice.FieldEncryptedSalt:
		return m.OldEncryptedSalt(ctx)
	}
	return nil, fmt.Errorf("unknown Invoice field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case invoice.FieldMinAmount:
		v, ok := value.(*big.Int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinAmount(v)
		return nil
	case invoice.FieldRecipient:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecipient(v)
		return nil
	case invoice.FieldBeneficiary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBeneficiary(v)
		return nil
	case invoice.FieldAsset:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAsset(v)
		return nil
	case invoice.FieldMetadata:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case invoice.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case invoice.FieldDeadline:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeadline(v)
		return nil
	case invoice.FieldFillAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFillAt(v)
		return nil
	case invoice.FieldCancelAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancelAt(v)
		return nil
	case invoice.FieldWalletAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletAddress(v)
		return nil
	case invoice.FieldEncryptedSalt:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEncryptedSalt(v)
		return nil
	}
	return fmt.Errorf("unknown Invoice field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InvoiceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InvoiceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Invoice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InvoiceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(invoice.FieldFillAt) {
		fields = append(fields, invoice.FieldFillAt)
	}
	if m.FieldCleared(invoice.FieldCancelAt) {
		fields = append(fields, invoice.FieldCancelAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InvoiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InvoiceMutation) ClearField(name string) error {
	switch name {
	case invoice.FieldFillAt:
		m.ClearFillAt()
		return nil
	case invoice.FieldCancelAt:
		m.ClearCancelAt()
		return nil
	}
	return fmt.Errorf("unknown Invoice nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InvoiceMutation) ResetField(name string) error {
	switch name {
	case invoice.FieldMinAmount:
		m.ResetMinAmount()
		return nil
	case invoice.FieldRecipient:
		m.ResetRecipient()
		return nil
	case invoice.FieldBeneficiary:
		m.ResetBeneficiary()
		return nil
	case invoice.FieldAsset:
		m.ResetAsset()
		return nil
	case invoice.FieldMetadata:
		m.ResetMetadata()
		return nil
	case invoice.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case invoice.FieldDeadline:
		m.ResetDeadline()
		return nil
	case invoice.FieldFillAt:
		m.ResetFillAt()
		return nil
	case invoice.FieldCancelAt:
		m.ResetCancelAt()
		return nil
	case invoice.FieldWalletAddress:
		m.ResetWalletAddress()
		return nil
	case invoice.FieldEncryptedSalt:
		m.ResetEncryptedSalt()
		return nil
	}
	return fmt.Errorf("unknown Invoice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InvoiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InvoiceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InvoiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InvoiceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InvoiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InvoiceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InvoiceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Invoice unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InvoiceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Invoice edge %s", name)
}
