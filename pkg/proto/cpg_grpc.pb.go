// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: cpg.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CPG_Ping_FullMethodName               = "/CPG/Ping"
	CPG_ListAssets_FullMethodName         = "/CPG/ListAssets"
	CPG_RecoverInvoice_FullMethodName     = "/CPG/RecoverInvoice"
	CPG_CreateInvoice_FullMethodName      = "/CPG/CreateInvoice"
	CPG_CancelInvoice_FullMethodName      = "/CPG/CancelInvoice"
	CPG_GetInvoice_FullMethodName         = "/CPG/GetInvoice"
	CPG_CheckInvoice_FullMethodName       = "/CPG/CheckInvoice"
	CPG_RequestCheckout_FullMethodName    = "/CPG/RequestCheckout"
	CPG_TryCheckoutInvoice_FullMethodName = "/CPG/TryCheckoutInvoice"
)

// CPGClient is the client API for CPG service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CPGClient interface {
	// Ping is used to check service health
	Ping(ctx context.Context, in *PingInput, opts ...grpc.CallOption) (*PingOutput, error)
	// ListAssets is used to get supported assets list
	ListAssets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListAssetsOutput, error)
	// RecoverInvoice is used to recover lost but payed invoices
	RecoverInvoice(ctx context.Context, in *RecoverInvoiceInput, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateInvoice creates a new invoice with custom metadata attached to it and an assigned random uuid
	CreateInvoice(ctx context.Context, in *CreateInvoiceInput, opts ...grpc.CallOption) (*CreateInvoiceOutput, error)
	// CancelInvoice cancel a pending invoice that is not filled, expired and checked out or already canceled
	CancelInvoice(ctx context.Context, in *CancelInvoiceInput, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetInvoice returns an invoice info and status by its id
	GetInvoice(ctx context.Context, in *GetInvoiceInput, opts ...grpc.CallOption) (*GetInvoiceOutput, error)
	// CheckInvoice check a pending invoice balance and make it filled if it reaches the required min amount
	CheckInvoice(ctx context.Context, in *CheckInvoiceInput, opts ...grpc.CallOption) (*CheckInvoiceOutput, error)
	// RequestCheckout set a non-pending invoice to too check out as soon as possible
	RequestCheckout(ctx context.Context, in *RequestCheckoutInput, opts ...grpc.CallOption) (*empty.Empty, error)
	// TryCheckoutInvoice try to checkout an invoice only if its not pending, it may take tool long and should be used async by admin
	TryCheckoutInvoice(ctx context.Context, in *TryCheckoutInvoiceInput, opts ...grpc.CallOption) (*empty.Empty, error)
}

type cPGClient struct {
	cc grpc.ClientConnInterface
}

func NewCPGClient(cc grpc.ClientConnInterface) CPGClient {
	return &cPGClient{cc}
}

func (c *cPGClient) Ping(ctx context.Context, in *PingInput, opts ...grpc.CallOption) (*PingOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingOutput)
	err := c.cc.Invoke(ctx, CPG_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPGClient) ListAssets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListAssetsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAssetsOutput)
	err := c.cc.Invoke(ctx, CPG_ListAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPGClient) RecoverInvoice(ctx context.Context, in *RecoverInvoiceInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CPG_RecoverInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPGClient) CreateInvoice(ctx context.Context, in *CreateInvoiceInput, opts ...grpc.CallOption) (*CreateInvoiceOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInvoiceOutput)
	err := c.cc.Invoke(ctx, CPG_CreateInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPGClient) CancelInvoice(ctx context.Context, in *CancelInvoiceInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CPG_CancelInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPGClient) GetInvoice(ctx context.Context, in *GetInvoiceInput, opts ...grpc.CallOption) (*GetInvoiceOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoiceOutput)
	err := c.cc.Invoke(ctx, CPG_GetInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPGClient) CheckInvoice(ctx context.Context, in *CheckInvoiceInput, opts ...grpc.CallOption) (*CheckInvoiceOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckInvoiceOutput)
	err := c.cc.Invoke(ctx, CPG_CheckInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPGClient) RequestCheckout(ctx context.Context, in *RequestCheckoutInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CPG_RequestCheckout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPGClient) TryCheckoutInvoice(ctx context.Context, in *TryCheckoutInvoiceInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CPG_TryCheckoutInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CPGServer is the server API for CPG service.
// All implementations must embed UnimplementedCPGServer
// for forward compatibility.
type CPGServer interface {
	// Ping is used to check service health
	Ping(context.Context, *PingInput) (*PingOutput, error)
	// ListAssets is used to get supported assets list
	ListAssets(context.Context, *empty.Empty) (*ListAssetsOutput, error)
	// RecoverInvoice is used to recover lost but payed invoices
	RecoverInvoice(context.Context, *RecoverInvoiceInput) (*empty.Empty, error)
	// CreateInvoice creates a new invoice with custom metadata attached to it and an assigned random uuid
	CreateInvoice(context.Context, *CreateInvoiceInput) (*CreateInvoiceOutput, error)
	// CancelInvoice cancel a pending invoice that is not filled, expired and checked out or already canceled
	CancelInvoice(context.Context, *CancelInvoiceInput) (*empty.Empty, error)
	// GetInvoice returns an invoice info and status by its id
	GetInvoice(context.Context, *GetInvoiceInput) (*GetInvoiceOutput, error)
	// CheckInvoice check a pending invoice balance and make it filled if it reaches the required min amount
	CheckInvoice(context.Context, *CheckInvoiceInput) (*CheckInvoiceOutput, error)
	// RequestCheckout set a non-pending invoice to too check out as soon as possible
	RequestCheckout(context.Context, *RequestCheckoutInput) (*empty.Empty, error)
	// TryCheckoutInvoice try to checkout an invoice only if its not pending, it may take tool long and should be used async by admin
	TryCheckoutInvoice(context.Context, *TryCheckoutInvoiceInput) (*empty.Empty, error)
	mustEmbedUnimplementedCPGServer()
}

// UnimplementedCPGServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCPGServer struct{}

func (UnimplementedCPGServer) Ping(context.Context, *PingInput) (*PingOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCPGServer) ListAssets(context.Context, *empty.Empty) (*ListAssetsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (UnimplementedCPGServer) RecoverInvoice(context.Context, *RecoverInvoiceInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverInvoice not implemented")
}
func (UnimplementedCPGServer) CreateInvoice(context.Context, *CreateInvoiceInput) (*CreateInvoiceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedCPGServer) CancelInvoice(context.Context, *CancelInvoiceInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelInvoice not implemented")
}
func (UnimplementedCPGServer) GetInvoice(context.Context, *GetInvoiceInput) (*GetInvoiceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (UnimplementedCPGServer) CheckInvoice(context.Context, *CheckInvoiceInput) (*CheckInvoiceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInvoice not implemented")
}
func (UnimplementedCPGServer) RequestCheckout(context.Context, *RequestCheckoutInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCheckout not implemented")
}
func (UnimplementedCPGServer) TryCheckoutInvoice(context.Context, *TryCheckoutInvoiceInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryCheckoutInvoice not implemented")
}
func (UnimplementedCPGServer) mustEmbedUnimplementedCPGServer() {}
func (UnimplementedCPGServer) testEmbeddedByValue()             {}

// UnsafeCPGServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CPGServer will
// result in compilation errors.
type UnsafeCPGServer interface {
	mustEmbedUnimplementedCPGServer()
}

func RegisterCPGServer(s grpc.ServiceRegistrar, srv CPGServer) {
	// If the following call pancis, it indicates UnimplementedCPGServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CPG_ServiceDesc, srv)
}

func _CPG_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPGServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CPG_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPGServer).Ping(ctx, req.(*PingInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPG_ListAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPGServer).ListAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CPG_ListAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPGServer).ListAssets(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPG_RecoverInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverInvoiceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPGServer).RecoverInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CPG_RecoverInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPGServer).RecoverInvoice(ctx, req.(*RecoverInvoiceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPG_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPGServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CPG_CreateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPGServer).CreateInvoice(ctx, req.(*CreateInvoiceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPG_CancelInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInvoiceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPGServer).CancelInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CPG_CancelInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPGServer).CancelInvoice(ctx, req.(*CancelInvoiceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPG_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPGServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CPG_GetInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPGServer).GetInvoice(ctx, req.(*GetInvoiceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPG_CheckInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInvoiceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPGServer).CheckInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CPG_CheckInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPGServer).CheckInvoice(ctx, req.(*CheckInvoiceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPG_RequestCheckout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCheckoutInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPGServer).RequestCheckout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CPG_RequestCheckout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPGServer).RequestCheckout(ctx, req.(*RequestCheckoutInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPG_TryCheckoutInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryCheckoutInvoiceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPGServer).TryCheckoutInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CPG_TryCheckoutInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPGServer).TryCheckoutInvoice(ctx, req.(*TryCheckoutInvoiceInput))
	}
	return interceptor(ctx, in, info, handler)
}

// CPG_ServiceDesc is the grpc.ServiceDesc for CPG service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CPG_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CPG",
	HandlerType: (*CPGServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _CPG_Ping_Handler,
		},
		{
			MethodName: "ListAssets",
			Handler:    _CPG_ListAssets_Handler,
		},
		{
			MethodName: "RecoverInvoice",
			Handler:    _CPG_RecoverInvoice_Handler,
		},
		{
			MethodName: "CreateInvoice",
			Handler:    _CPG_CreateInvoice_Handler,
		},
		{
			MethodName: "CancelInvoice",
			Handler:    _CPG_CancelInvoice_Handler,
		},
		{
			MethodName: "GetInvoice",
			Handler:    _CPG_GetInvoice_Handler,
		},
		{
			MethodName: "CheckInvoice",
			Handler:    _CPG_CheckInvoice_Handler,
		},
		{
			MethodName: "RequestCheckout",
			Handler:    _CPG_RequestCheckout_Handler,
		},
		{
			MethodName: "TryCheckoutInvoice",
			Handler:    _CPG_TryCheckoutInvoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpg.proto",
}
