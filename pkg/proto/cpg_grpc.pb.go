// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: cpg.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CPG_ListAssets_FullMethodName    = "/CPG/ListAssets"
	CPG_CreateInvoice_FullMethodName = "/CPG/CreateInvoice"
	CPG_GetInvoice_FullMethodName    = "/CPG/GetInvoice"
	CPG_CheckWallet_FullMethodName   = "/CPG/CheckWallet"
	CPG_Checkout_FullMethodName      = "/CPG/Checkout"
)

// CPGClient is the client API for CPG service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CPGClient interface {
	ListAssets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAssetsResponse, error)
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error)
	GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*GetInvoiceResponse, error)
	CheckWallet(ctx context.Context, in *CheckWalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Checkout(ctx context.Context, in *CheckoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cPGClient struct {
	cc grpc.ClientConnInterface
}

func NewCPGClient(cc grpc.ClientConnInterface) CPGClient {
	return &cPGClient{cc}
}

func (c *cPGClient) ListAssets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAssetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAssetsResponse)
	err := c.cc.Invoke(ctx, CPG_ListAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPGClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInvoiceResponse)
	err := c.cc.Invoke(ctx, CPG_CreateInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPGClient) GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*GetInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoiceResponse)
	err := c.cc.Invoke(ctx, CPG_GetInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPGClient) CheckWallet(ctx context.Context, in *CheckWalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CPG_CheckWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPGClient) Checkout(ctx context.Context, in *CheckoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CPG_Checkout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CPGServer is the server API for CPG service.
// All implementations must embed UnimplementedCPGServer
// for forward compatibility
type CPGServer interface {
	ListAssets(context.Context, *emptypb.Empty) (*ListAssetsResponse, error)
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error)
	GetInvoice(context.Context, *GetInvoiceRequest) (*GetInvoiceResponse, error)
	CheckWallet(context.Context, *CheckWalletRequest) (*emptypb.Empty, error)
	Checkout(context.Context, *CheckoutRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCPGServer()
}

// UnimplementedCPGServer must be embedded to have forward compatible implementations.
type UnimplementedCPGServer struct {
}

func (UnimplementedCPGServer) ListAssets(context.Context, *emptypb.Empty) (*ListAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (UnimplementedCPGServer) CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedCPGServer) GetInvoice(context.Context, *GetInvoiceRequest) (*GetInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (UnimplementedCPGServer) CheckWallet(context.Context, *CheckWalletRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckWallet not implemented")
}
func (UnimplementedCPGServer) Checkout(context.Context, *CheckoutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkout not implemented")
}
func (UnimplementedCPGServer) mustEmbedUnimplementedCPGServer() {}

// UnsafeCPGServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CPGServer will
// result in compilation errors.
type UnsafeCPGServer interface {
	mustEmbedUnimplementedCPGServer()
}

func RegisterCPGServer(s grpc.ServiceRegistrar, srv CPGServer) {
	s.RegisterService(&CPG_ServiceDesc, srv)
}

func _CPG_ListAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPGServer).ListAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CPG_ListAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPGServer).ListAssets(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPG_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPGServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CPG_CreateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPGServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPG_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPGServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CPG_GetInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPGServer).GetInvoice(ctx, req.(*GetInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPG_CheckWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPGServer).CheckWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CPG_CheckWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPGServer).CheckWallet(ctx, req.(*CheckWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPG_Checkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPGServer).Checkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CPG_Checkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPGServer).Checkout(ctx, req.(*CheckoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CPG_ServiceDesc is the grpc.ServiceDesc for CPG service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CPG_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CPG",
	HandlerType: (*CPGServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAssets",
			Handler:    _CPG_ListAssets_Handler,
		},
		{
			MethodName: "CreateInvoice",
			Handler:    _CPG_CreateInvoice_Handler,
		},
		{
			MethodName: "GetInvoice",
			Handler:    _CPG_GetInvoice_Handler,
		},
		{
			MethodName: "CheckWallet",
			Handler:    _CPG_CheckWallet_Handler,
		},
		{
			MethodName: "Checkout",
			Handler:    _CPG_Checkout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpg.proto",
}
